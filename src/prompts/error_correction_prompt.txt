Fix this Python code that caused an error during execution.

Return ONLY the corrected code with proper indentation.
Do not add explanations or comments.

Requirements:
1. The code must define and return a model (e.g., XGBRegressor, RandomForestClassifier, etc.).
2. All necessary imports must be inside the `load_model()` function.
3. No extra code or imports are allowed outside the `load_model()` function.

Error Message:
$error_msg

Faulty Code:
$faulty_code

Examples of valid final code:

def load_model():
    from sklearn.ensemble import RandomForestClassifier
    return RandomForestClassifier(n_estimators=100)

or

def load_model():
    from xgboost import XGBRegressor
    return XGBRegressor(n_estimators=100, max_depth=5, learning_rate=0.1)

Common Mistakes to Avoid:
- Incomplete function that does not return a model.
- Including imports or comments outside of `load_model()`.

See the examples:

Example 1:

Faulty Code:

```python
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV
import numpy as np

def load_model():
    from xgboost import XGBRegressor
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import mean_squared_error, r2_score
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.linear_model import Ridge
    from sklearn.metrics import mean_absolute_error
    from sklearn.model_selection import cross_val_score

    X = np.random.rand(1000, 10)
    y = np.random.rand(1000)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    param_grid = {
        'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800],
        'max_depth': [3, 5, 7, 9, 11, 13, 15],
        'learning_rate': [0.01, 0.05, 0.1, 0.2, 0.3, 0.5],
        'reg_lambda': [0.1, 1, 10, 50, 100],
        'reg_alpha': [0.1, 1, 10],
        'subsample': [0.5, 0.7, 0.9],
        'colsample_bytree': [0.5, 0.7, 0.9]
    }

    model = XGBRegressor(objective='reg:squaredlogerror')
    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)

    best_model = grid_search.best_estimator_
    best_model.fit(X_train, y_train)

    y_pred = best_model.predict(X_test)
    print("Best Parameters: ", grid_search.best_params_)
    print("Best Score: ", grid_search.best_score_)
    print("Mean Squared Error: ", mean_squared_error(y_test, y_pred))
    print("R^2 Score



Corrected Code:
def load_model():
    import numpy as np
    from xgboost import XGBRegressor
    from sklearn.model_selection import GridSearchCV, train_test_split
    from sklearn.metrics import mean_squared_error, r2_score
    from sklearn.preprocessing import StandardScaler

    X = np.random.rand(1000, 10)
    y = np.random.rand(1000)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    param_grid = {
        'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800],
        'max_depth': [3, 5, 7, 9, 11, 13, 15],
        'learning_rate': [0.01, 0.05, 0.1, 0.2, 0.3, 0.5],
        'reg_lambda': [0.1, 1, 10, 50, 100],
        'reg_alpha': [0.1, 1, 10],
        'subsample': [0.5, 0.7, 0.9],
        'colsample_bytree': [0.5, 0.7, 0.9]
    }

    model = XGBRegressor(objective='reg:squaredlogerror')
    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)

    best_model = grid_search.best_estimator_
    best_model.fit(X_train, y_train)

    y_pred = best_model.predict(X_test)
    print("Best Parameters: ", grid_search.best_params_)
    print("Best Score: ", grid_search.best_score_)
    print("Mean Squared Error: ", mean_squared_error(y_test, y_pred))
    print("R^2 Score: ", r2_score(y_test, y_pred))

    return best_model


Example 2:

Faulty Code:
from xgboost import XGBRegressor # Import is outside the function
def load_model(): 
    model = XGBRegressor(n_estimators=50, max_depth=3) 
    return model


Corrected Code:
def load_model(): 
    from xgboost import XGBRegressor 
    return XGBRegressor(n_estimators=50, max_depth=3)


Now, provide ONLY the fixed version of `load_model()` that satisfies all requirements. Corrected Code:
